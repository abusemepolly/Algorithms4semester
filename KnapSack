def knapsack(weights, values, capacity):
    """
    :param weights: Список с весами предметов.
    :param values: Список со стоимостью предметов.
    :param capacity: Вместимость рюкзака.
    :return: Максимальная стоимость, которую можно унести в рюкзаке.
    """
    # Количество предметов
    n = len(weights)

    # Инициализация таблицы динамического программирования
    # Создаём таблицу с размерами (n+1) x (capacity+1), заполненную нулями.
    # +1 в размерах таблицы, чтобы учесть случай с нулевыми индексами (без предметов и без вместимости).
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    # Заполнение таблицы
    for i in range(1, n + 1):  # Перебираем предметы
        for w in range(1, capacity + 1):  # Перебираем возможные вместимости рюкзака
            if weights[i - 1] <= w:  # Если предмет помещается в рюкзак
                # Выбираем максимальное значение между:
                # 1. Стоимостью, если не брать текущий предмет.
                # 2. Стоимостью текущего предмета плюс стоимость, если взять предметы с учётом оставшегося веса.
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                # Если предмет не помещается, сохраняем предыдущее максимальное значение.
                dp[i][w] = dp[i - 1][w]

    # Результат находится в dp[n][capacity], где n - количество предметов, capacity - вместимость рюкзака.
    return dp[n][capacity]


def main():
    n = int(input("Введите количество предметов: "))
    weights = []
    values = []

    for i in range(n):
        weight, value = map(int, input(f"Введите вес и стоимость предмета {i + 1} через пробел: ").split())
        weights.append(weight)
        values.append(value)

    capacity = int(input("Введите вместимость рюкзака: "))

    max_value = knapsack(weights, values, capacity)
    print(f"Максимальная стоимость, которую можно унести: {max_value} условных единиц.")


if __name__ == "__main__":
    main()
